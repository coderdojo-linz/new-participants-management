// Don't forget to tell Prisma about your edits to this file using
// `yarn rw prisma migrate dev` or `yarn rw prisma db push`.
// `migrate` is like committing while `push` is for prototyping.
// Read more about both here:
// https://www.prisma.io/docs/orm/prisma-migrate

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = "native"
}

// Define your own datamodels here and run `yarn redwood prisma migrate dev`
// to create migrations for them and apply to your dev DB.
model User {
  id                  Int              @id @default(autoincrement())
  email               String           @unique
  roles               Role[]
  stamps              Stamp[]
  userBadges          UserBadge[]
  hashedPassword      String
  salt                String
  resetToken          String?
  resetTokenExpiresAt DateTime?
  webAuthnChallenge   String?          @unique
  credentials         UserCredential[]
}

model Role {
  id    Int    @id @default(autoincrement())
  name  String @unique
  users User[]
}

model Stamp {
  id     Int      @id @default(autoincrement())
  date   DateTime
  type   String
  userId Int
  user   User     @relation(fields: [userId], references: [id])
}

model Badge {
  id         Int         @id @default(autoincrement())
  name       String      @unique
  imageUrl   String
  userBadges UserBadge[]
}

model UserBadge {
  id      Int   @id @default(autoincrement())
  userId  Int
  badgeId Int
  user    User  @relation(fields: [userId], references: [id])
  badge   Badge @relation(fields: [badgeId], references: [id])
}

model UserCredential {
  id         String  @id
  userId     Int
  user       User    @relation(fields: [userId], references: [id])
  publicKey  Bytes
  transports String?
  counter    BigInt
}
